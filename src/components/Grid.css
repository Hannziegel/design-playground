:root {
    --clr-dark: #0f172a;
    --clr-light: #f1f5f9;
    --clr-accent: #e11d48;
}

*,
*::before,
*::after {
    box-sizing: border-box;
}

body {
    margin: 5em 0 0 0;
    padding: 0;
    line-height: 1.6;
    word-spacing: 1.4px;
    font-family: 'Roboto', sans-serif;
    color: var(--clr-dark);
    background-color: var(--clr-light);
}

.container {
    width: 80%;
    margin: 0 auto;
    border: 10px solid var(--clr-dark);
}

.item {
    padding: 0.5em;
    background-color: #fb7185;
    font-weight: 700;
    color: var(--clr-light);
    border: 10px solid var(--clr-accent);
}

/* ---- First Part */
    /* 
    .container {
        display: grid;
        grid-template-rows: 100px 100px 100px 100px 100px 100px;
        grid-template-columns: 100px 100px 100px 100px 100px 100px;
    }

    /* .item-1 {
        grid-row-start: 1;
        grid-row-end: 3;
        grid-column-start: 1;
        grid-column-end: 5;
    } 

    .item-1 {
        grid-row: 1 / 3;
        grid-column: 1 / 5;
    }

    .item-2 {
        grid-row: 1 / 3;
        grid-column: 5 / 7;
    }

    .item-2 {
        /* span = from whenever you are currently are,span yourself this number of times 
        /* span = dosent all you to you to explicit define your starting and ending position, the item would be push away if increased the size of the item before (item 1).
        /* span = good to use if you dont care about entering an item in a specific position, then the span keyword is okay to use 
        grid-row: span 2;
        grid-column: span 2;
    }

    .item-3 {
        /* grid-area: row-start col-start row-end col-end; 
        /* grid-area = does the job of 6 proprierties 
        grid-area: 3 / 1 / 7 / 7;
        grid-area: 3 / 1 / -1 / -1;
    }

    .item-2 {
        grid-area: 2 / 4 / 4 / 6 ;
        z-index: 1; 
    }

    .item-1 {
        grid-row: 1 / 3;
        grid-column: 1 / 7;
    }

    /* 
        added de item-4, grid added a new row for item 4 even without any grid left 
        Itens added outside the explicit grid, is referred as an implicid grid.
        The new item is gonna be smaller then the others because dosent inherit the values that were set in the grid tamplate rows and colums properties;
        we can add the grid auto rows in the container to set the size of the rows on any implicit grid, that is created; 
    

    .container {
        grid-auto-rows: 100px;
    }

    .container {
        /* change the flow, instead of adding an implicit row is gonna add implicit column 
        grid-auto-columns: 100px;
        grid-auto-flow: column;
    }
 */


/* RESET THE GRID, TAKE OUT EVERTHING EXCPET THE GRID-TAMPLATE-ROWS/COLUMNS, remove de item-4 */

/* .container {
    display: grid;
    grid-template-rows: 100px 100px;
    grid-template-columns: 1fr 1fr 1fr;
}

.container {
    display: grid;
    grid-template-rows: 100px 100px;
    grid-template-columns: 1fr 3fr 1fr;
}

.container {
    display: grid;
    grid-template-rows: 100px 100px;
    grid-template-columns: 100px 3fr 1fr;
}

.container {
    display: grid;
    grid-template-rows: 100px 100px;
    grid-template-columns: 100px minmax(100px, 3fr) 1fr;
}

.container {
    display: grid;
    grid-template-rows: repeat(2, 100px);
    grid-template-columns: 100px minmax(100px, 3fr) 1fr;
    grid-gap: 1em;
    grid-gap: 1em 3em;
}
 */


/* Reset Again, add item 4 back */

/* this way of positioning things is fun but makes layering things more difficult, this is just an exemple */

/* 
.container {
    display: grid;
    grid-template-rows: 100px 300px 100px;
    grid-template-columns: 1fr 3fr;
    /* each sets of single quotes('') is an row, and each value is an column
    grid-template-areas: 
    'header header'
    'aside main'
    'footer footer'
    ;
}

.item-1 {
    grid-area: header;
}

.item-2 {
    grid-area: aside;
}

.item-3 {
    grid-area: main;
}

.item-4 {
    grid-area: footer;
}
 */

/* RESETED AGAIN */

/* .container {
    display: grid;
    grid-template-rows: repeat(4, 100px);
    grid-template-columns: repeat(4, 1fr);
    /* both have and default value of stratch 
    justify-items: start;
    align-items: start;
}

.container {
    justify-items: baseline;
    align-items: baseline;
}

.container {
    justify-items: center;
    align-items: center;
}

.container {
    justify-items: start;
    align-items: center;
}

.container {
    justify-items: start;
    align-items: end;
}

.item-1 {
    justify-self: center;
    align-self: stretch;
}
 */

/* RESETED AGAIN */

/* .container {
    display: grid;
    height: 600px;
    grid-template-rows: repeat(2, 100px);
    grid-template-columns: repeat(2, 100px);
    justify-content: start;
    align-content: start;
}

.container {
    justify-content: end;
    align-content: end;
}

.container {
    justify-content: baseline;
    align-content: baseline;
}

.container {
    justify-content: space-between;
    align-content: space-between;
}

.container {
    justify-content: space-around;
    align-content: space-around;
}

.container {
    justify-content: space-evenly;
    align-content: space-evenly;
} */


/* RESETED AGAIN */

.container {
    display: grid;
    grid-template-rows: repeat(4, 100px);
    grid-template-columns: repeat(4, minmax(100px, 1fr));
}

/* trick for reponsivenes */

.container {
    display: grid;
    grid-template-rows: repeat(4, 100px);
    grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
}